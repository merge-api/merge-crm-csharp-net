/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.CRMClient.Client.OpenAPIDateConverter;

namespace Merge.CRMClient.Model
{
    /// <summary>
    /// ItemSchema
    /// </summary>
    [DataContract(Name = "ItemSchema")]
    public partial class ItemSchema : IEquatable<ItemSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSchema" /> class.
        /// </summary>
        /// <param name="itemType">itemType.</param>
        /// <param name="itemFormat">itemFormat.</param>
        /// <param name="itemChoices">itemChoices.</param>
        public ItemSchema(bool itemType = default(bool), bool itemFormat = default(bool), List<string> itemChoices = default(List<string>))
        {
            this.ItemType = itemType;
            this.ItemFormat = itemFormat;
            this.ItemChoices = itemChoices;
        }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "item_type", EmitDefaultValue = true)]
        public bool ItemType { get; set; }

        /// <summary>
        /// Gets or Sets ItemFormat
        /// </summary>
        [DataMember(Name = "item_format", EmitDefaultValue = true)]
        public bool ItemFormat { get; set; }

        /// <summary>
        /// Gets or Sets ItemChoices
        /// </summary>
        [DataMember(Name = "item_choices", EmitDefaultValue = false)]
        public List<string> ItemChoices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemSchema {\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  ItemFormat: ").Append(ItemFormat).Append("\n");
            sb.Append("  ItemChoices: ").Append(ItemChoices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemSchema);
        }

        /// <summary>
        /// Returns true if ItemSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemType == input.ItemType ||
                    this.ItemType.Equals(input.ItemType)
                ) && 
                (
                    this.ItemFormat == input.ItemFormat ||
                    this.ItemFormat.Equals(input.ItemFormat)
                ) && 
                (
                    this.ItemChoices == input.ItemChoices ||
                    this.ItemChoices != null &&
                    input.ItemChoices != null &&
                    this.ItemChoices.SequenceEqual(input.ItemChoices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ItemType.GetHashCode();
                hashCode = hashCode * 59 + this.ItemFormat.GetHashCode();
                if (this.ItemChoices != null)
                    hashCode = hashCode * 59 + this.ItemChoices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
