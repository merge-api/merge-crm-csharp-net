/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.CRMClient.Client.OpenAPIDateConverter;

namespace Merge.CRMClient.Model
{
    /// <summary>
    /// AssociationTypeRequestRequest
    /// </summary>
    [DataContract(Name = "AssociationTypeRequestRequest")]
    public partial class AssociationTypeRequestRequest : IEquatable<AssociationTypeRequestRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Cardinality
        /// </summary>
        [DataMember(Name = "cardinality", EmitDefaultValue = false)]
        public CardinalityEnum? Cardinality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationTypeRequestRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssociationTypeRequestRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationTypeRequestRequest" /> class.
        /// </summary>
        /// <param name="sourceObjectClass">sourceObjectClass (required).</param>
        /// <param name="targetObjectClasses">targetObjectClasses (required).</param>
        /// <param name="remoteKeyName">remoteKeyName (required).</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="cardinality">cardinality.</param>
        /// <param name="isRequired">isRequired (default to false).</param>
        public AssociationTypeRequestRequest(ObjectClassDescriptionRequest sourceObjectClass = default(ObjectClassDescriptionRequest), List<ObjectClassDescriptionRequest> targetObjectClasses = default(List<ObjectClassDescriptionRequest>), string remoteKeyName = default(string), string displayName = default(string), CardinalityEnum? cardinality = default(CardinalityEnum?), bool isRequired = false)
        {
            // to ensure "sourceObjectClass" is required (not null)
            this.SourceObjectClass = sourceObjectClass ?? throw new ArgumentNullException("sourceObjectClass is a required property for AssociationTypeRequestRequest and cannot be null");
            // to ensure "targetObjectClasses" is required (not null)
            this.TargetObjectClasses = targetObjectClasses ?? throw new ArgumentNullException("targetObjectClasses is a required property for AssociationTypeRequestRequest and cannot be null");
            // to ensure "remoteKeyName" is required (not null)
            this.RemoteKeyName = remoteKeyName ?? throw new ArgumentNullException("remoteKeyName is a required property for AssociationTypeRequestRequest and cannot be null");
            this.DisplayName = displayName;
            this.Cardinality = cardinality;
            this.IsRequired = isRequired;
        }

        /// <summary>
        /// Gets or Sets SourceObjectClass
        /// </summary>
        [DataMember(Name = "source_object_class", IsRequired = true, EmitDefaultValue = false)]
        public ObjectClassDescriptionRequest SourceObjectClass { get; set; }

        /// <summary>
        /// Gets or Sets TargetObjectClasses
        /// </summary>
        [DataMember(Name = "target_object_classes", IsRequired = true, EmitDefaultValue = false)]
        public List<ObjectClassDescriptionRequest> TargetObjectClasses { get; set; }

        /// <summary>
        /// Gets or Sets RemoteKeyName
        /// </summary>
        [DataMember(Name = "remote_key_name", IsRequired = true, EmitDefaultValue = false)]
        public string RemoteKeyName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [DataMember(Name = "is_required", EmitDefaultValue = true)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssociationTypeRequestRequest {\n");
            sb.Append("  SourceObjectClass: ").Append(SourceObjectClass).Append("\n");
            sb.Append("  TargetObjectClasses: ").Append(TargetObjectClasses).Append("\n");
            sb.Append("  RemoteKeyName: ").Append(RemoteKeyName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Cardinality: ").Append(Cardinality).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssociationTypeRequestRequest);
        }

        /// <summary>
        /// Returns true if AssociationTypeRequestRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AssociationTypeRequestRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssociationTypeRequestRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceObjectClass == input.SourceObjectClass ||
                    (this.SourceObjectClass != null &&
                    this.SourceObjectClass.Equals(input.SourceObjectClass))
                ) && 
                (
                    this.TargetObjectClasses == input.TargetObjectClasses ||
                    this.TargetObjectClasses != null &&
                    input.TargetObjectClasses != null &&
                    this.TargetObjectClasses.SequenceEqual(input.TargetObjectClasses)
                ) && 
                (
                    this.RemoteKeyName == input.RemoteKeyName ||
                    (this.RemoteKeyName != null &&
                    this.RemoteKeyName.Equals(input.RemoteKeyName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Cardinality == input.Cardinality ||
                    this.Cardinality.Equals(input.Cardinality)
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    this.IsRequired.Equals(input.IsRequired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceObjectClass != null)
                    hashCode = hashCode * 59 + this.SourceObjectClass.GetHashCode();
                if (this.TargetObjectClasses != null)
                    hashCode = hashCode * 59 + this.TargetObjectClasses.GetHashCode();
                if (this.RemoteKeyName != null)
                    hashCode = hashCode * 59 + this.RemoteKeyName.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.Cardinality.GetHashCode();
                hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RemoteKeyName (string) minLength
            if(this.RemoteKeyName != null && this.RemoteKeyName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RemoteKeyName, length must be greater than 1.", new [] { "RemoteKeyName" });
            }

            // DisplayName (string) minLength
            if(this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            yield break;
        }
    }

}
