/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.CRMClient.Client.OpenAPIDateConverter;

namespace Merge.CRMClient.Model
{
    /// <summary>
    /// CommonModelScopeData
    /// </summary>
    [DataContract(Name = "CommonModelScopeData")]
    public partial class CommonModelScopeData : IEquatable<CommonModelScopeData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonModelScopeData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonModelScopeData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonModelScopeData" /> class.
        /// </summary>
        /// <param name="commonModels">commonModels (required).</param>
        /// <param name="linkedAccountId">linkedAccountId.</param>
        public CommonModelScopeData(List<CommonModelScopesDisabledModels> commonModels = default(List<CommonModelScopesDisabledModels>), Guid linkedAccountId = default(Guid))
        {
            // to ensure "commonModels" is required (not null)
            this.CommonModels = commonModels ?? throw new ArgumentNullException("commonModels is a required property for CommonModelScopeData and cannot be null");
            this.LinkedAccountId = linkedAccountId;
        }

        /// <summary>
        /// Gets or Sets CommonModels
        /// </summary>
        [DataMember(Name = "common_models", IsRequired = true, EmitDefaultValue = false)]
        public List<CommonModelScopesDisabledModels> CommonModels { get; set; }

        /// <summary>
        /// Gets or Sets LinkedAccountId
        /// </summary>
        [DataMember(Name = "linked_account_id", EmitDefaultValue = false)]
        public Guid LinkedAccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonModelScopeData {\n");
            sb.Append("  CommonModels: ").Append(CommonModels).Append("\n");
            sb.Append("  LinkedAccountId: ").Append(LinkedAccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonModelScopeData);
        }

        /// <summary>
        /// Returns true if CommonModelScopeData instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonModelScopeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonModelScopeData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CommonModels == input.CommonModels ||
                    this.CommonModels != null &&
                    input.CommonModels != null &&
                    this.CommonModels.SequenceEqual(input.CommonModels)
                ) && 
                (
                    this.LinkedAccountId == input.LinkedAccountId ||
                    (this.LinkedAccountId != null &&
                    this.LinkedAccountId.Equals(input.LinkedAccountId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommonModels != null)
                    hashCode = hashCode * 59 + this.CommonModels.GetHashCode();
                if (this.LinkedAccountId != null)
                    hashCode = hashCode * 59 + this.LinkedAccountId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
