/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.CRMClient.Client.OpenAPIDateConverter;

namespace Merge.CRMClient.Model
{
    /// <summary>
    /// # The Association Object ### Description The &#x60;Association&#x60; record refers to an instance of an Association Type. ### Usage Example TODO
    /// </summary>
    [DataContract(Name = "Association")]
    public partial class Association : IEquatable<Association>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Association" /> class.
        /// </summary>
        /// <param name="associationType">associationType.</param>
        public Association(Guid? associationType = default(Guid?))
        {
            this.AssociationType = associationType;
        }

        /// <summary>
        /// Gets or Sets SourceObject
        /// </summary>
        [DataMember(Name = "source_object", EmitDefaultValue = true)]
        public Dictionary<string, Object> SourceObject { get; private set; }

        /// <summary>
        /// Returns false as SourceObject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceObject()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets TargetObject
        /// </summary>
        [DataMember(Name = "target_object", EmitDefaultValue = true)]
        public Dictionary<string, Object> TargetObject { get; private set; }

        /// <summary>
        /// Returns false as TargetObject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTargetObject()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets AssociationType
        /// </summary>
        [DataMember(Name = "association_type", EmitDefaultValue = true)]
        public Guid? AssociationType { get; set; }

        /// <summary>
        /// This is the datetime that this object was last updated by Merge
        /// </summary>
        /// <value>This is the datetime that this object was last updated by Merge</value>
        [DataMember(Name = "modified_at", EmitDefaultValue = false)]
        public DateTime ModifiedAt { get; private set; }

        /// <summary>
        /// Returns false as ModifiedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeModifiedAt()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Association {\n");
            sb.Append("  SourceObject: ").Append(SourceObject).Append("\n");
            sb.Append("  TargetObject: ").Append(TargetObject).Append("\n");
            sb.Append("  AssociationType: ").Append(AssociationType).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Association);
        }

        /// <summary>
        /// Returns true if Association instances are equal
        /// </summary>
        /// <param name="input">Instance of Association to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Association input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceObject == input.SourceObject ||
                    this.SourceObject != null &&
                    input.SourceObject != null &&
                    this.SourceObject.SequenceEqual(input.SourceObject)
                ) && 
                (
                    this.TargetObject == input.TargetObject ||
                    this.TargetObject != null &&
                    input.TargetObject != null &&
                    this.TargetObject.SequenceEqual(input.TargetObject)
                ) && 
                (
                    this.AssociationType == input.AssociationType ||
                    (this.AssociationType != null &&
                    this.AssociationType.Equals(input.AssociationType))
                ) && 
                (
                    this.ModifiedAt == input.ModifiedAt ||
                    (this.ModifiedAt != null &&
                    this.ModifiedAt.Equals(input.ModifiedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceObject != null)
                    hashCode = hashCode * 59 + this.SourceObject.GetHashCode();
                if (this.TargetObject != null)
                    hashCode = hashCode * 59 + this.TargetObject.GetHashCode();
                if (this.AssociationType != null)
                    hashCode = hashCode * 59 + this.AssociationType.GetHashCode();
                if (this.ModifiedAt != null)
                    hashCode = hashCode * 59 + this.ModifiedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
