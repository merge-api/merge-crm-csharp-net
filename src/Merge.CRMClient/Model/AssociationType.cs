/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.CRMClient.Client.OpenAPIDateConverter;

namespace Merge.CRMClient.Model
{
    /// <summary>
    /// AssociationType
    /// </summary>
    [DataContract(Name = "AssociationType")]
    public partial class AssociationType : IEquatable<AssociationType>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Cardinality
        /// </summary>
        [DataMember(Name = "cardinality", EmitDefaultValue = true)]
        public CardinalityEnum? Cardinality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationType" /> class.
        /// </summary>
        /// <param name="remoteKeyName">remoteKeyName.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="cardinality">cardinality.</param>
        /// <param name="isRequired">isRequired.</param>
        /// <param name="remoteId">The third-party API ID of the matching object..</param>
        public AssociationType(string remoteKeyName = default(string), string displayName = default(string), CardinalityEnum? cardinality = default(CardinalityEnum?), bool isRequired = default(bool), string remoteId = default(string))
        {
            this.RemoteKeyName = remoteKeyName;
            this.DisplayName = displayName;
            this.Cardinality = cardinality;
            this.IsRequired = isRequired;
            this.RemoteId = remoteId;
        }

        /// <summary>
        /// Gets or Sets SourceObjectClass
        /// </summary>
        [DataMember(Name = "source_object_class", EmitDefaultValue = false)]
        public Dictionary<string, Object> SourceObjectClass { get; private set; }

        /// <summary>
        /// Returns false as SourceObjectClass should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceObjectClass()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets TargetObjectClasses
        /// </summary>
        [DataMember(Name = "target_object_classes", EmitDefaultValue = false)]
        public List<AssociationSubType> TargetObjectClasses { get; private set; }

        /// <summary>
        /// Returns false as TargetObjectClasses should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTargetObjectClasses()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets RemoteKeyName
        /// </summary>
        [DataMember(Name = "remote_key_name", EmitDefaultValue = true)]
        public string RemoteKeyName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [DataMember(Name = "is_required", EmitDefaultValue = true)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// The third-party API ID of the matching object.
        /// </summary>
        /// <value>The third-party API ID of the matching object.</value>
        [DataMember(Name = "remote_id", EmitDefaultValue = true)]
        public string RemoteId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssociationType {\n");
            sb.Append("  SourceObjectClass: ").Append(SourceObjectClass).Append("\n");
            sb.Append("  TargetObjectClasses: ").Append(TargetObjectClasses).Append("\n");
            sb.Append("  RemoteKeyName: ").Append(RemoteKeyName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Cardinality: ").Append(Cardinality).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RemoteId: ").Append(RemoteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssociationType);
        }

        /// <summary>
        /// Returns true if AssociationType instances are equal
        /// </summary>
        /// <param name="input">Instance of AssociationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssociationType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceObjectClass == input.SourceObjectClass ||
                    this.SourceObjectClass != null &&
                    input.SourceObjectClass != null &&
                    this.SourceObjectClass.SequenceEqual(input.SourceObjectClass)
                ) && 
                (
                    this.TargetObjectClasses == input.TargetObjectClasses ||
                    this.TargetObjectClasses != null &&
                    input.TargetObjectClasses != null &&
                    this.TargetObjectClasses.SequenceEqual(input.TargetObjectClasses)
                ) && 
                (
                    this.RemoteKeyName == input.RemoteKeyName ||
                    (this.RemoteKeyName != null &&
                    this.RemoteKeyName.Equals(input.RemoteKeyName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Cardinality == input.Cardinality ||
                    this.Cardinality.Equals(input.Cardinality)
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    this.IsRequired.Equals(input.IsRequired)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RemoteId == input.RemoteId ||
                    (this.RemoteId != null &&
                    this.RemoteId.Equals(input.RemoteId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceObjectClass != null)
                    hashCode = hashCode * 59 + this.SourceObjectClass.GetHashCode();
                if (this.TargetObjectClasses != null)
                    hashCode = hashCode * 59 + this.TargetObjectClasses.GetHashCode();
                if (this.RemoteKeyName != null)
                    hashCode = hashCode * 59 + this.RemoteKeyName.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.Cardinality.GetHashCode();
                hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RemoteId != null)
                    hashCode = hashCode * 59 + this.RemoteId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
