/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.CRMClient.Client.OpenAPIDateConverter;

namespace Merge.CRMClient.Model
{
    /// <summary>
    /// # The EmailAddress Object ### Description The &#x60;EmailAddress&#x60; object is used to represent an entity&#39;s email address. ### Usage Example Fetch from the &#x60;GET Contact&#x60; endpoint and view their email addresses.
    /// </summary>
    [DataContract(Name = "EmailAddress")]
    public partial class EmailAddress : IEquatable<EmailAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAddress" /> class.
        /// </summary>
        /// <param name="emailAddress">The email address..</param>
        /// <param name="emailAddressType">The email address&#39;s type..</param>
        public EmailAddress(string emailAddress = default(string), string emailAddressType = default(string))
        {
            this._EmailAddress = emailAddress;
            this.EmailAddressType = emailAddressType;
        }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name = "email_address", EmitDefaultValue = true)]
        public string _EmailAddress { get; set; }

        /// <summary>
        /// The email address&#39;s type.
        /// </summary>
        /// <value>The email address&#39;s type.</value>
        [DataMember(Name = "email_address_type", EmitDefaultValue = true)]
        public string EmailAddressType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailAddress {\n");
            sb.Append("  _EmailAddress: ").Append(_EmailAddress).Append("\n");
            sb.Append("  EmailAddressType: ").Append(EmailAddressType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailAddress);
        }

        /// <summary>
        /// Returns true if EmailAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._EmailAddress == input._EmailAddress ||
                    (this._EmailAddress != null &&
                    this._EmailAddress.Equals(input._EmailAddress))
                ) && 
                (
                    this.EmailAddressType == input.EmailAddressType ||
                    (this.EmailAddressType != null &&
                    this.EmailAddressType.Equals(input.EmailAddressType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._EmailAddress != null)
                    hashCode = hashCode * 59 + this._EmailAddress.GetHashCode();
                if (this.EmailAddressType != null)
                    hashCode = hashCode * 59 + this.EmailAddressType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
