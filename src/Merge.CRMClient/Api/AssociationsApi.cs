/*
 * Merge CRM API
 *
 * The unified API for building rich integrations with multiple CRM platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Merge.CRMClient.Client;
using Merge.CRMClient.Model;

namespace Merge.CRMClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssociationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;Association&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="customObjectClassId"></param>
        /// <param name="objectId"></param>
        /// <param name="associationTypeId">If provided, will only return opportunities with this association_type. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <returns>PaginatedAssociationList</returns>
        PaginatedAssociationList CustomObjectClassesCustomObjectsAssociationsList(string xAccountToken, Guid customObjectClassId, Guid objectId, string associationTypeId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;Association&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="customObjectClassId"></param>
        /// <param name="objectId"></param>
        /// <param name="associationTypeId">If provided, will only return opportunities with this association_type. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <returns>ApiResponse of PaginatedAssociationList</returns>
        ApiResponse<PaginatedAssociationList> CustomObjectClassesCustomObjectsAssociationsListWithHttpInfo(string xAccountToken, Guid customObjectClassId, Guid objectId, string associationTypeId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an Association between &#x60;source_object_id&#x60; and &#x60;target_object_id&#x60; of type &#x60;association_type_id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="associationTypeId"></param>
        /// <param name="sourceClassId"></param>
        /// <param name="sourceObjectId"></param>
        /// <param name="targetClassId"></param>
        /// <param name="targetObjectId"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <returns>Association</returns>
        Association CustomObjectClassesCustomObjectsAssociationsUpdate(string xAccountToken, Guid associationTypeId, Guid sourceClassId, Guid sourceObjectId, string targetClassId, Guid targetObjectId, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an Association between &#x60;source_object_id&#x60; and &#x60;target_object_id&#x60; of type &#x60;association_type_id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="associationTypeId"></param>
        /// <param name="sourceClassId"></param>
        /// <param name="sourceObjectId"></param>
        /// <param name="targetClassId"></param>
        /// <param name="targetObjectId"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <returns>ApiResponse of Association</returns>
        ApiResponse<Association> CustomObjectClassesCustomObjectsAssociationsUpdateWithHttpInfo(string xAccountToken, Guid associationTypeId, Guid sourceClassId, Guid sourceObjectId, string targetClassId, Guid targetObjectId, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssociationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;Association&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="customObjectClassId"></param>
        /// <param name="objectId"></param>
        /// <param name="associationTypeId">If provided, will only return opportunities with this association_type. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedAssociationList</returns>
        System.Threading.Tasks.Task<PaginatedAssociationList> CustomObjectClassesCustomObjectsAssociationsListAsync(string xAccountToken, Guid customObjectClassId, Guid objectId, string associationTypeId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;Association&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="customObjectClassId"></param>
        /// <param name="objectId"></param>
        /// <param name="associationTypeId">If provided, will only return opportunities with this association_type. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedAssociationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedAssociationList>> CustomObjectClassesCustomObjectsAssociationsListWithHttpInfoAsync(string xAccountToken, Guid customObjectClassId, Guid objectId, string associationTypeId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an Association between &#x60;source_object_id&#x60; and &#x60;target_object_id&#x60; of type &#x60;association_type_id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="associationTypeId"></param>
        /// <param name="sourceClassId"></param>
        /// <param name="sourceObjectId"></param>
        /// <param name="targetClassId"></param>
        /// <param name="targetObjectId"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Association</returns>
        System.Threading.Tasks.Task<Association> CustomObjectClassesCustomObjectsAssociationsUpdateAsync(string xAccountToken, Guid associationTypeId, Guid sourceClassId, Guid sourceObjectId, string targetClassId, Guid targetObjectId, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an Association between &#x60;source_object_id&#x60; and &#x60;target_object_id&#x60; of type &#x60;association_type_id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="associationTypeId"></param>
        /// <param name="sourceClassId"></param>
        /// <param name="sourceObjectId"></param>
        /// <param name="targetClassId"></param>
        /// <param name="targetObjectId"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Association)</returns>
        System.Threading.Tasks.Task<ApiResponse<Association>> CustomObjectClassesCustomObjectsAssociationsUpdateWithHttpInfoAsync(string xAccountToken, Guid associationTypeId, Guid sourceClassId, Guid sourceObjectId, string targetClassId, Guid targetObjectId, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssociationsApi : IAssociationsApiSync, IAssociationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssociationsApi : IAssociationsApi
    {
        private Merge.CRMClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssociationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssociationsApi(String basePath)
        {
            this.Configuration = Merge.CRMClient.Client.Configuration.MergeConfigurations(
                Merge.CRMClient.Client.GlobalConfiguration.Instance,
                new Merge.CRMClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Merge.CRMClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Merge.CRMClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Merge.CRMClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssociationsApi(Merge.CRMClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Merge.CRMClient.Client.Configuration.MergeConfigurations(
                Merge.CRMClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Merge.CRMClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Merge.CRMClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Merge.CRMClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssociationsApi(Merge.CRMClient.Client.ISynchronousClient client, Merge.CRMClient.Client.IAsynchronousClient asyncClient, Merge.CRMClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Merge.CRMClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Merge.CRMClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Merge.CRMClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Merge.CRMClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Merge.CRMClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns a list of &#x60;Association&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="customObjectClassId"></param>
        /// <param name="objectId"></param>
        /// <param name="associationTypeId">If provided, will only return opportunities with this association_type. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <returns>PaginatedAssociationList</returns>
        public PaginatedAssociationList CustomObjectClassesCustomObjectsAssociationsList(string xAccountToken, Guid customObjectClassId, Guid objectId, string associationTypeId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string))
        {
            Merge.CRMClient.Client.ApiResponse<PaginatedAssociationList> localVarResponse = CustomObjectClassesCustomObjectsAssociationsListWithHttpInfo(xAccountToken, customObjectClassId, objectId, associationTypeId, createdAfter, createdBefore, cursor, includeDeletedData, includeRemoteData, modifiedAfter, modifiedBefore, pageSize, remoteId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of &#x60;Association&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="customObjectClassId"></param>
        /// <param name="objectId"></param>
        /// <param name="associationTypeId">If provided, will only return opportunities with this association_type. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <returns>ApiResponse of PaginatedAssociationList</returns>
        public Merge.CRMClient.Client.ApiResponse<PaginatedAssociationList> CustomObjectClassesCustomObjectsAssociationsListWithHttpInfo(string xAccountToken, Guid customObjectClassId, Guid objectId, string associationTypeId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.CRMClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling AssociationsApi->CustomObjectClassesCustomObjectsAssociationsList");

            Merge.CRMClient.Client.RequestOptions localVarRequestOptions = new Merge.CRMClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Merge.CRMClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.CRMClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("custom_object_class_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(customObjectClassId)); // path parameter
            localVarRequestOptions.PathParameters.Add("object_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (associationTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "association_type_id", associationTypeId));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (includeDeletedData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "include_deleted_data", includeDeletedData));
            }
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (modifiedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "modified_after", modifiedAfter));
            }
            if (modifiedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "modified_before", modifiedBefore));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (remoteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "remote_id", remoteId));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.CRMClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedAssociationList>("/custom-object-classes/{custom_object_class_id}/custom-objects/{object_id}/associations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomObjectClassesCustomObjectsAssociationsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of &#x60;Association&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="customObjectClassId"></param>
        /// <param name="objectId"></param>
        /// <param name="associationTypeId">If provided, will only return opportunities with this association_type. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedAssociationList</returns>
        public async System.Threading.Tasks.Task<PaginatedAssociationList> CustomObjectClassesCustomObjectsAssociationsListAsync(string xAccountToken, Guid customObjectClassId, Guid objectId, string associationTypeId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Merge.CRMClient.Client.ApiResponse<PaginatedAssociationList> localVarResponse = await CustomObjectClassesCustomObjectsAssociationsListWithHttpInfoAsync(xAccountToken, customObjectClassId, objectId, associationTypeId, createdAfter, createdBefore, cursor, includeDeletedData, includeRemoteData, modifiedAfter, modifiedBefore, pageSize, remoteId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of &#x60;Association&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="customObjectClassId"></param>
        /// <param name="objectId"></param>
        /// <param name="associationTypeId">If provided, will only return opportunities with this association_type. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedAssociationList)</returns>
        public async System.Threading.Tasks.Task<Merge.CRMClient.Client.ApiResponse<PaginatedAssociationList>> CustomObjectClassesCustomObjectsAssociationsListWithHttpInfoAsync(string xAccountToken, Guid customObjectClassId, Guid objectId, string associationTypeId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.CRMClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling AssociationsApi->CustomObjectClassesCustomObjectsAssociationsList");


            Merge.CRMClient.Client.RequestOptions localVarRequestOptions = new Merge.CRMClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Merge.CRMClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.CRMClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("custom_object_class_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(customObjectClassId)); // path parameter
            localVarRequestOptions.PathParameters.Add("object_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (associationTypeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "association_type_id", associationTypeId));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (includeDeletedData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "include_deleted_data", includeDeletedData));
            }
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (modifiedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "modified_after", modifiedAfter));
            }
            if (modifiedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "modified_before", modifiedBefore));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (remoteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "remote_id", remoteId));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.CRMClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedAssociationList>("/custom-object-classes/{custom_object_class_id}/custom-objects/{object_id}/associations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomObjectClassesCustomObjectsAssociationsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates an Association between &#x60;source_object_id&#x60; and &#x60;target_object_id&#x60; of type &#x60;association_type_id&#x60;.
        /// </summary>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="associationTypeId"></param>
        /// <param name="sourceClassId"></param>
        /// <param name="sourceObjectId"></param>
        /// <param name="targetClassId"></param>
        /// <param name="targetObjectId"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <returns>Association</returns>
        public Association CustomObjectClassesCustomObjectsAssociationsUpdate(string xAccountToken, Guid associationTypeId, Guid sourceClassId, Guid sourceObjectId, string targetClassId, Guid targetObjectId, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?))
        {
            Merge.CRMClient.Client.ApiResponse<Association> localVarResponse = CustomObjectClassesCustomObjectsAssociationsUpdateWithHttpInfo(xAccountToken, associationTypeId, sourceClassId, sourceObjectId, targetClassId, targetObjectId, isDebugMode, runAsync);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates an Association between &#x60;source_object_id&#x60; and &#x60;target_object_id&#x60; of type &#x60;association_type_id&#x60;.
        /// </summary>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="associationTypeId"></param>
        /// <param name="sourceClassId"></param>
        /// <param name="sourceObjectId"></param>
        /// <param name="targetClassId"></param>
        /// <param name="targetObjectId"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <returns>ApiResponse of Association</returns>
        public Merge.CRMClient.Client.ApiResponse<Association> CustomObjectClassesCustomObjectsAssociationsUpdateWithHttpInfo(string xAccountToken, Guid associationTypeId, Guid sourceClassId, Guid sourceObjectId, string targetClassId, Guid targetObjectId, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.CRMClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling AssociationsApi->CustomObjectClassesCustomObjectsAssociationsUpdate");

            // verify the required parameter 'targetClassId' is set
            if (targetClassId == null)
                throw new Merge.CRMClient.Client.ApiException(400, "Missing required parameter 'targetClassId' when calling AssociationsApi->CustomObjectClassesCustomObjectsAssociationsUpdate");

            Merge.CRMClient.Client.RequestOptions localVarRequestOptions = new Merge.CRMClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Merge.CRMClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.CRMClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("association_type_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(associationTypeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("source_class_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(sourceClassId)); // path parameter
            localVarRequestOptions.PathParameters.Add("source_object_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(sourceObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("target_class_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(targetClassId)); // path parameter
            localVarRequestOptions.PathParameters.Add("target_object_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(targetObjectId)); // path parameter
            if (isDebugMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "is_debug_mode", isDebugMode));
            }
            if (runAsync != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "run_async", runAsync));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.CRMClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Association>("/custom-object-classes/{source_class_id}/custom-objects/{source_object_id}/associations/{target_class_id}/{target_object_id}/{association_type_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomObjectClassesCustomObjectsAssociationsUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates an Association between &#x60;source_object_id&#x60; and &#x60;target_object_id&#x60; of type &#x60;association_type_id&#x60;.
        /// </summary>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="associationTypeId"></param>
        /// <param name="sourceClassId"></param>
        /// <param name="sourceObjectId"></param>
        /// <param name="targetClassId"></param>
        /// <param name="targetObjectId"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Association</returns>
        public async System.Threading.Tasks.Task<Association> CustomObjectClassesCustomObjectsAssociationsUpdateAsync(string xAccountToken, Guid associationTypeId, Guid sourceClassId, Guid sourceObjectId, string targetClassId, Guid targetObjectId, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Merge.CRMClient.Client.ApiResponse<Association> localVarResponse = await CustomObjectClassesCustomObjectsAssociationsUpdateWithHttpInfoAsync(xAccountToken, associationTypeId, sourceClassId, sourceObjectId, targetClassId, targetObjectId, isDebugMode, runAsync, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates an Association between &#x60;source_object_id&#x60; and &#x60;target_object_id&#x60; of type &#x60;association_type_id&#x60;.
        /// </summary>
        /// <exception cref="Merge.CRMClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="associationTypeId"></param>
        /// <param name="sourceClassId"></param>
        /// <param name="sourceObjectId"></param>
        /// <param name="targetClassId"></param>
        /// <param name="targetObjectId"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Association)</returns>
        public async System.Threading.Tasks.Task<Merge.CRMClient.Client.ApiResponse<Association>> CustomObjectClassesCustomObjectsAssociationsUpdateWithHttpInfoAsync(string xAccountToken, Guid associationTypeId, Guid sourceClassId, Guid sourceObjectId, string targetClassId, Guid targetObjectId, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.CRMClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling AssociationsApi->CustomObjectClassesCustomObjectsAssociationsUpdate");

            // verify the required parameter 'targetClassId' is set
            if (targetClassId == null)
                throw new Merge.CRMClient.Client.ApiException(400, "Missing required parameter 'targetClassId' when calling AssociationsApi->CustomObjectClassesCustomObjectsAssociationsUpdate");


            Merge.CRMClient.Client.RequestOptions localVarRequestOptions = new Merge.CRMClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Merge.CRMClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.CRMClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("association_type_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(associationTypeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("source_class_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(sourceClassId)); // path parameter
            localVarRequestOptions.PathParameters.Add("source_object_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(sourceObjectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("target_class_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(targetClassId)); // path parameter
            localVarRequestOptions.PathParameters.Add("target_object_id", Merge.CRMClient.Client.ClientUtils.ParameterToString(targetObjectId)); // path parameter
            if (isDebugMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "is_debug_mode", isDebugMode));
            }
            if (runAsync != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.CRMClient.Client.ClientUtils.ParameterToMultiMap("", "run_async", runAsync));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.CRMClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Association>("/custom-object-classes/{source_class_id}/custom-objects/{source_object_id}/associations/{target_class_id}/{target_object_id}/{association_type_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomObjectClassesCustomObjectsAssociationsUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
